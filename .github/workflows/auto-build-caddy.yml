name: Auto Build Caddy Single File

on:
  schedule:
    - cron: '0 18 * * 0'
  workflow_dispatch:

env:
  CADDY_REPO: caddyserver/caddy
  SOURCE_REPO: simtelboy/caddysinglefile
  TARGET_REPO: simtelboy/eye
  FORWARDPROXY_COMMIT: 5d50e17654cd19f7948bbb0e67e8b9f452df9cd4

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.compare.outputs.should-build }}
      new-version: ${{ steps.get-caddy.outputs.caddy_version }}
    steps:
      - name: Get latest Caddy version
        id: get-caddy
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.CADDY_REPO }}/releases/latest)
          if [ $? -ne 0 ]; then
            echo "Failed to fetch Caddy release data"
            exit 1
          fi
          VERSION=$(echo "$RESPONSE" | jq -r '.tag_name' | sed 's/v//')
          if [ -z "$VERSION" ]; then
            echo "No valid tag_name found, using default version 0.0.0"
            VERSION="0.0.0"
          fi
          echo "caddy_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Latest Caddy version: v$VERSION"

      - name: Get current Eye version
        id: get-eye
        run: |
          if [ -n "$(curl -s https://api.github.com/repos/${{ env.TARGET_REPO }}/releases/latest | grep 'tag_name')" ]; then
            VERSION=$(curl -s https://api.github.com/repos/${{ env.TARGET_REPO }}/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//')
            echo "current_version=$VERSION" >> $GITHUB_OUTPUT
            echo "Current Eye version: v$VERSION"
          else
            echo "current_version=0.0.0" >> $GITHUB_OUTPUT
            echo "No existing Eye release, will build"
          fi

      - name: Compare versions
        id: compare
        run: |
          NEW_VER="${{ steps.get-caddy.outputs.caddy_version }}"
          CUR_VER="${{ steps.get-eye.outputs.current_version }}"
          echo "Comparing $NEW_VER > $CUR_VER"
          if [[ "$NEW_VER" > "$CUR_VER" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "Newer version detected: $NEW_VER"
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "No update needed"
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Eye repo (for token)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone source repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SOURCE_REPO }}
          path: source
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker for Debian 11
        uses: docker/setup-buildx-action@v3

      - name: Build Caddy using xcaddy in Debian 11
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.new-version }}"
          echo "Building with version: $NEW_VERSION"  # 调试输出
          # 创建 Dockerfile
          cat > Dockerfile << EOF
          FROM debian:11
          RUN apt-get update && apt-get install -y wget git ca-certificates pkg-config libssl-dev build-essential && rm -rf /var/lib/apt/lists/*
          RUN wget https://go.dev/dl/go1.25.2.linux-amd64.tar.gz && \
              tar -C /usr/local -xzf go1.25.2.linux-amd64.tar.gz && \
              rm go1.25.2.linux-amd64.tar.gz
          ENV GOPATH=/root/go
          ENV PATH=/usr/local/go/bin:/root/go/bin:\$PATH
          RUN git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com" && \
              go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest && \
              go install github.com/mitchellh/gox@latest && \
              ls -la /root/go/bin/  # 调试：检查 xcaddy 是否安装
          WORKDIR /app
          COPY . .
          RUN CGO_ENABLED=1 /root/go/bin/xcaddy build --output /app/caddy \
              --with github.com/caddyserver/forwardproxy=github.com/simtelboy/caddysinglefile@${FORWARDPROXY_COMMIT} && \
              ls -la /app/  # 调试：检查 caddy 是否生成
          EOF
          # 构建并提取二进制（传递 GITHUB_TOKEN 作为 build-arg）
          docker build --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} -t caddy-build .
          docker run --rm -v $(pwd):/output caddy-build cp /app/caddy /output/
          mv caddy caddy-v${NEW_VERSION}-linux-amd64
          echo "Built caddy binary: $(ls -la caddy-v${NEW_VERSION}-linux-amd64)"

      - name: Create or update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.new-version }}"
          echo "Creating release with version: $NEW_VERSION"  # 调试输出
          TAG="v$NEW_VERSION"
          ASSET_PATH="caddy-v${NEW_VERSION}-linux-amd64"
          # 创建 Release
          gh release create "$TAG" --title "天神之眼 v${NEW_VERSION}" --notes "自动编译的天神之眼 v${NEW_VERSION}，本程序运行在debian11以上！" "$ASSET_PATH" \
            --repo ${{ env.TARGET_REPO }} || echo "Release already exists, updating..."
          # 上传资产
          gh release upload "$TAG" "$ASSET_PATH" --repo ${{ env.TARGET_REPO }} --clobber
          echo "Released v${NEW_VERSION} with binary: $ASSET_PATH"
